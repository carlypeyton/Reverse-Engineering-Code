// Code executed in strict mode 
'use strict';

// Require file system (allows you to work with file system on your computer)
var fs = require('fs');
// Require ath (aids in path manipulation)
var path = require('path');
// Require Sequelize (promise-based ORM, which supports MYSQL and is easy to test)
var Sequelize = require('sequelize');
// Require path.basename() (returns the filename part of a file path)
var basename = path.basename(module.filename);
// Define Node environment (development - will become dead code in production build and be stripped out, reducing execution time)
var env = process.env.NODE_ENV || 'development';
// Require config.json (main configuration file)
var config = require(__dirname + '/../config/config.json')[env];
// Define var db (will hold database object which will be configuration)
var db = {};

// Code is generated by sequelize-cli using environment variable
// Configure using environment variable, otherwise usee DB, username, password from config.json
if (config.use_env_variable) {
  var sequelize = new Sequelize(process.env[config.use_env_variable]);
} else {
  var sequelize = new Sequelize(config.database, config.username, config.password, config);
}

// Imports and read models
fs
  // fs.readdirSync synchronously reads directory in given argument (here it is __dirname, which includes models directory)
  // This ets all files that are executing script synchronously
  .readdirSync(__dirname)
  // Filter ensures that there are js files to read (aside from this one), and filters out files starting with "." or index.js, then returns js files
  .filter(function (file) {
    return (file.indexOf('.') !== 0) && (file !== basename) && (file.slice(-3) === '.js');
  })
  // forEach goes through each file, and imports each model to the db
  .forEach(function (file) {
    var model = sequelize['import'](path.join(__dirname, file));
    db[model.name] = model;
  });

// Object.keys goes through each model in db and invokes associate function (if it exists)
// This sets up associations between models, foreign keys, etc.
Object.keys(db).forEach(function (modelName) {
  if (db[modelName].associate) {
    db[modelName].associate(db);
  }
});

db.sequelize = sequelize;
db.Sequelize = Sequelize;

// Export database object
module.exports = db;
